Una Base de Datos es un conjunto de datos pertenecientes a un mismo contexto y almacenados para su posterior uso.

üëâüèº Persisten una gran cantidad de informaci√≥n.
üëâüèº Segurizan el acceso a los datos.
üëâüèº Organizan y estructuran los datos por tipo y relaci√≥n. 

üî¥ Tablas 

Son una colecci√≥n de datos relacionados y organizados en filas y columnas.

‚úÖ Las columnas (atributos) definen un conjunto de datos de un tipo particular. Las filas tomar√°n un valor concreto para cada columna de la tabla.

‚úÖ Una fila (tupla/registro) contiene un valor espec√≠fico para cada columna. Representan un conjunto de datos relacionados con la misma estructura, la cual est√° definida por las columnas.

‚úÖ Un campo (celda) es donde una columna y una fila se intersectan. Contiene un valor concreto definido por la columna y perteneciente al conjunto de datos de la fila.

üí• ¬øQu√© es una BD Relacional?

Llamamos as√≠ a toda BD que cumple con el modelo relacional.

Dicho paradigma consiste en generar relaciones entre los datos guardados en diferentes tablas y, a trav√©s de estas relaciones, conectar dichas tablas.

Las relaciones se llevar√°n a cabo a trav√©s de campos especiales, conocidos como claves primarias (PK) y claves for√°neas (FK).

‚úÖ Caracter√≠sticas:

Cada tabla ser√° un conjunto de registros, conformados por filas (row) y columnas (column).
Se compone de varias tablas y relaciones entre ellas.
No pueden existir dos o m√°s tablas con igual nombre.
Las relaciones se llevar√°n a cabo a trav√©s de campos especiales, conocidos como claves primarias (primary key) y claves for√°neas (foreign key).

üî¥ Modelo Entidad - Relaci√≥n

Colecci√≥n de conceptos empleados para describir la estrucura de una BD.

Entidad üëâüèº Una representaci√≥n de un objeto, ser o concepto del mundo real que se describe en una BD.
DB : Tablas

Atributo üëâüèº Las entidades tienen atributos que representan sus caracter√≠sticas o propiedades.
DB : columnas de las tablas.

Relaciones üëâüèº La descripci√≥n de ciertas interdependencias entre una o m√°s entidades.
DB : PK y FK. 

üí• SQL

SQL es un lenguaje estructurado de consulta, no es una base de datos, sino el lenguaje para poder extraer de una base de datos la informaci√≥n que requerimos.

Clasificaci√≥n de SQL
El lenguaje sql se clasifica en varios tipos de lenguaje, entre los mas importantes, DDL y DML

DDL (Data Definition Language)
Este lenguaje lo utilizamos para la creaci√≥n de la estructura de base de datos, la misma se encuentra en un servidor, en donde se aloja una instancia.

En esta asignatura para realizar esta tarea utilizaremos el programa SQL Server Magement Studio pudiendo hacer la tarea a trav√©s de una interfaz gr√°fica.

Pero debemos saber que existen las siguientes instrucciones dentro de este lenguaje:

CREATE: Nos permite crear base de datos, tablas, campos e √≠ndices.
ALTER: Utilizado para modificar las tablas agregando campos o cambiando la definici√≥n de los campos.
DROP: Elimina tablas e √≠ndices.
TRUNCATE: Elimina todos los registros de una tabla.
DML (Data Manipulation Language)
Con este lenguaje podemos consultar, agregar, modificar y eliminar los datos dentro de las tablas, sus principales sentencias son:

SELECT: Nos deja relacionar, filtrar y ordenar los datos para poder visualizarlos.
INSERT: Agrega una tupla dentro de una tabla.
UPDATE: Nos permite modificar el valor de un registro o parte del mismo.
DELETE: Elimina registros de una tabla de una base de datos.

Realizar consultas: Comando SELECT
Permite realizar operaciones de selecci√≥n, ordenaci√≥n, agrupaci√≥n y filtrado de registros. Esta instrucci√≥n o sentencia utiliza diversas cl√°usulas:

FROM Especifica la tabla de la que se quieren obtener los registros.

WHERE Especifica los criterios o condiciones que deben cumplir los registros a buscar dentro de la tabla.

ORDER BY Ordena los registros seleccionados en funci√≥n de un campo.

GROUP BY Permite agrupar los registros seleccionados en funci√≥n de uno o m√°s campos.

HAVING Especifica una condici√≥n de b√∫squeda para un grupo.

Mostrar todo el contenido de una tabla
La siguiente sentencia selcciona todos los registros contenidos en la tabla Articulos y se muestran todas las columnas:

SELECT * FROM Articulos

El asterisco (*) ubicado a continuaci√≥n de la sentencia SELECT especifica qu√©, en el resultado de la consulta, se deben mostrar todas las columnas (campos) contenidos en la tabla.

Mostrar algunos campos de una tabla
Se selecciona los valores de la columna Nombre, de todos los registros de la tabla Articulos:

SELECT Nombre FROM Articulos

Se selecciona todos los valores de las columnas Nombre y Precio de la tabla Articulos:

SELECT Nombre, Precio FROM Articulos

WHERE
La cl√°usula WHERE se utiliza cuando se desea recuperar informaci√≥n espec√≠fica de una tabla sin incluir otros datos irrelevantes. Podemos utilizar para restringir los datos que se recuperan. La condici√≥n proporcionada en la cl√°usula WHERE filtra las filas recuperadas y devuelve s√≥lo las filas esperadas. La cl√°usula WHERE se puede utilizar junto con SELECT, DELETE, UPDATE.

Operadores de Comparaci√≥n
Asociado a la cl√°usula WHERE se agregan los operadores de comparaci√≥n:

Operador	Descripcion
=		Igual a
<		Menor a
>		Mayor a
>=		Mayor o igual a
<=		Menor o igual a
<>		No es igual a
Se selecciona de la tabla Articulos la columna Nombre y muestra todos aquellos registros cuyo valor en la columna C√≥digo sea igual a 1:

SELECT Nombre FROM Articulos WHERE Codigo = 1

Se selecciona de la tabla Articulos las columnas Nombre y Precio y muestra todos aquellos registros cuyo precio sea mayor a 150:

SELECT Nombre, Precio FROM Articulos WHERE Precio > 150

Operadores L√≥gicos
Para crear expresiones l√≥gicas disponemos de varios operadores de comparaci√≥n.

Operador	Descripcion
AND		Se debe cumplir todas las condiciones especificadas
OR		Se debe cumplir al menos una de las conduiciones
NOT		No debe cumplir las condiciones especificadas
Si uno o los dos valores a comparar son NULL, el resultado es NULL. (Excepto con el operador <=> que es usado para una comparaci√≥n con NULL segura).

El operador <=> funciona igual que el operador =. Salvo que, si en la comparaci√≥n una o ambas de las expresiones es nula, el resultado no es NULL. Si se comparan dos expresiones nulas, el resultado es verdadero.

Se selecciona de la tabla Articulos todos aquellos registros cuyo precio tenga un valor mayor o igual a 500, o su stock sea mayor o igual a 100:

SELECT Nombre, Precio 
FROM Articulos 
WHERE Precio >= 500 OR Stock >= 100

Operadores BETWEEN / NOT BETWEEN
Especifica un intervalo. La cl√°usula BETWEEN especifica un rango de b√∫squeda. NOT BETWEEN especifica el rando para el cual no queremos los datos. Para indicar que deseamos recuperar los registros seg√∫n el intervalo de valores de un campo. La sintaxis es la siguiente:

BETWEEN m√≠nimo AND m√°ximo:

SELECT Nombre, Precio 
FROM Articulos 
WHERE Precio BETWEEN 100 AND 200

NOT BETWEEN m√≠nimo AND m√°ximo:

SELECT Nombre, Precio 
FROM Articulos 
WHERE Precio NOT BETWEEN 100 AND 200

Operadores LIKE / NOT LIKE
El operador LIKE se usa para hacer comparaciones entre cadenas y patrones. El resultado es verdadero si la cadena se ajusta al patr√≥n o falso en caso contrario.

Tanto si la cadena como el patr√≥n son NULL, el resultado es NULL.

Para definir estos patrones, se hace uso de comodines:

Operador	Descripcion
%		Coincidencia con cualquier n√∫mero de caracteres, incluso ninguno
_		Coincidencia con un √∫nico caracter
Se muestra de la tabla Articulos todos aquellos registros que en el campo nombre, figure la palabra Pala:

SELECT * FROM Articulos 
WHERE Nombre LIKE '%Pala%'

Crear registros: Comando INSERT
Para insertar datos en una tabla utilizamos la sentencia INSERT. Con ella, podemos a√±adir registros uno a uno, o a√±adir tantos registros como deseemos, en una sola sentencia.

INSERT INTO Productos
VALUES ('iPhone 5', 499.99, 'Apple')

Se insertan los valores especificados despues de la palabra VALUES en cada uno de los campos. Es muy importante respetar el orden los datos se deben especificar en el mismo orden en que figuran las columnas en la tabla y respetar los tipos de dato de cada columna.

Valores NULL
La expresi√≥n NULL significa "dato desconocido" o "valor inexistente". No es lo mismo que un valor 0 en un campo num√©rico, o una cadena vac√≠a, o una cadena de texto con la palabra NULL literal en un campo de tipo texto. A veces, puede desconocerse o no existir el dato correspondiente a alg√∫n campo de un registro. En estos casos, se dice que el campo puede contener valores nulos. Por ejemplo, en una tabla con el nombre Productos, se puede tener valores nulos en el campo precio, en el caso de que, para algunos productos, no se haya establecido el precio para la venta. En contraposici√≥n, una tabla puede contener campos que no pueden quedar vac√≠os, como los campos que identifican cada registro (c√≥digos de identificaci√≥n), que son clave primaria. Por defecto (si no lo aclaramos en la creaci√≥n de la tabla) los campos permiten valores nulos.

INSERT INTO Productos
VALUES ('iPhone 5', 499.99, NULL )

En el ejemplo anterior podemos ver que para el campo Precio, el valor NULL no es una cadena de caracteres, por lo que no se coloca entre comillas. Si un campo acepta valores nulos, podemos ingresar NULL cuando no conocemos el valor. Adem√°s, si una columna fue definida como no obligatoria cuando creamos nuestra tabla, puede no incluirse en el listado de campos (puede entenderse como que el campo "no es obligatorio" de asignar un valor) y eso se rellenara con NULL.

Modificar registros: Comando UPDATE
Podemos modificar registros de una tabla utilizando la sentencia UPDATE. La sintaxis gen√©rica del comando UPDATE para actualizar un registro existente es:

UPDATE Tabla 
SET Campo1 = Valor1 
WHERE Campo = 'Valor'

Es posible, del mismo modo, actualizar el valor de m√°s de una columna separ√°ndolas en la secci√≥n SET mediante comas como delimitador:

UPDATE Tabla 
SET Campo1 = Valor1, Cmapo2 = Valor2, 
WHERE Campo = 'Valor'

Actualizaciones selectivas
Mediante la cl√°usula WHERE se puede establecer una condici√≥n; de esta manera, s√≥lo las filas/registros que cumplan esa condici√≥n ser√°n actualizadas. Ejemplos:

UPDATE Articulos 
SET Nombre = `Pala Ancha` 
WHERE Nombre = 'Pala'

UPDATE Articulos 
SET Precio = 499.99 
WHERE Nombre = 'Pala'

UPDATE Articulos 
SET Precio = 499.99 
WHERE Nombre <> 'Pala'

Eliminar registros: Comando DELETE
Para eliminar registros de una tabla, se utiliza la sentencia DELETE. Al hacerlo, se deber√° especificar la condici√≥n que deben cumplir los registros de la tabla a eliminar. En el ejemplo se eliminar√≠an de la tabla Productos todas aquellas filas/registros donde el campo idProducto contenga el valor 1.

DELETE Productos 
WHERE idProducto = 1

IMPORTANT
Si no especificas ninguna condici√≥n a trav√©s de una cl√°usula WHERE, se eliminar√°n todos los registros de la tabla sin ninguna limitaci√≥n (es decir, la tabla quedar√° vac√≠a).

TRUNCATE TABLE
La sentencia DELETE se puede utilizar para eliminar todos los registros de una tabla, pero tiene la desventaja de no ser tan eficiente, ya que, por ejemplo (entre otras limitaciones), no resetea los valores de los campos AUTO_INCREMENT. Por este motivo, si se opta por vaciar completamente la tabla, es recomendable utilizar la sentencia TRUNCATE TABLE, la cual elimina los registros en su totalidad y deja vac√≠a la tabla, de manera menos costosa (en t√©rminos de rendimiento) para el servidor de base de datos.

TRUNCATE TABLE Productos 

