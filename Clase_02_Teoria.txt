Cuando programamos podemos encontrarnos escribiendo las mismas sentencias una y otra vez a lo largo del código. Para evitar esto, podemos trasformar esas sentencias duplicadas en un método.

Los métodos estáticos son pequeñas piezas de código que se encargan de realizar una tarea concreta. También se los suele llamar como métodos de clase.

Por ejemplo, dentro de una aplicación financiera podríamos tener un método que realice el cálculo de impuestos y reutilizar esa funcionalidad en varios lugares sin necesidad de rescribir el algoritmo una y otra vez.

Al igual que los programas, los métodos estáticos usualmente tienen datos de entrada y de salida. A menudo se los describe como cajas negras, donde ingresamos materias primas por un agujero y salen productos manufacturados desde otro.

Si están bien diseñados, una vez creados los métodos no debería preocuparnos cómo resuelven la tarea, sólo el qué hacen.

Los métodos estáticos están compuestos de una firma que define el qué hace y de un cuerpo que contiene la implementación, el cómo lo hace.

La firma del método lo define y funciona como una declaración del mismo. Su sintaxis es la siguiente:

Modificador de acceso Otros modificadores Tipo de retorno Identificador (Parámetros de entrada)

Modificador de acceso: Indica y limita desde donde se puede interactuar con un método u otros tipos de miembros. Por defecto es private.

Modificador	Descripción
public	Accesible desde cualquier parte.
private	Sólo accesible desde dentro del mismo tipo.
internal	Sólo accesible desde dentro del mismo ensamblado / proyecto.
protected	Sólo accesible desde dentro del mismo tipo o tipos derivados (hijos).
Otros modificadores: Existen otros modificadores que iremos viendo a lo largo de la cursada y se ubican después del modificador de acceso. Por ejemplo, el modificador static marca al método como estático. Estos modificadores son opcionales.

Tipo de retorno: Se debe indicar el tipo de dato que retorna el método, puede ser cualquier tipo soportado por la plataforma. Si no retorna nada se debe colocar void.

Identificador: Nombre del método. Debe ser un verbo con notación PascalCase.

Parámetros de entrada: Van entre paréntesis después del identificador y separados por coma. Si un método no recibe argumento deben ir los paréntesis vacíos. Cada parámetro debe estar compuesto por el tipo de dato y seguido el nombre del parámetro (TipoParametro1 nombreParametro1, TipoParametro2 nombreParametro2). Los nombres de parámetros deben ser sustantivos con notación camelCase.

Seguido de la firma viene el cuerpo, el cual consiste en un bloque de código encerrado entre llaves. Dentro del cuerpo del método podemos tener distintos tipos de sentencias, incluyendo de selección e iteración. Finalmente, para retornar algún valor se debe usar la palabra reservada return.

✅ Muchas veces empezamos escribiendo nuestro código de manera desordenada, con sentencias duplicadas y nombres poco descriptivos. Esto nos pasa a todos los desarrolladores. Escribir código es como escribir un libro o un artículo, los primeros bocetos serán un conjunto de ideas desordenadas que se van mejorando de forma iterativa hasta llegar a la calidad de escritura del material final.

La refactorización (refactoring) es una técnica de la ingeniería de software para reestructurar un código fuente, alterando su estructura interna sin cambiar su comportamiento externo. Esta técnica consiste en modificar el código fuente para mejorar su consistencia interna y su claridad.

La refactorización no arregla errores ni añade funcionalidad, sólo mejora la comprensión, estructura y diseño del código.

Esta técnica debe ser parte del día a día de un buen desarrollador, cada pequeña mejora aporta a una restructuración significa del código que facilita su posterior mantenimiento y modificación.

✅ Documentar métodos
Si escribimos /// sobre un método generaremos la documentación XML de C# que nos permitirá documentar qué hace el método, qué recibe y qué retorna.

/// <summary>
/// Cotiza la venta de un monto de dólares dado, retornando el costo en pesos.
/// </summary>
/// <param name="montoDolaresAVender">Cantidad de dólares que se desean vender.</param>
/// <returns>Costo en pesos de la venta.</returns>
public static decimal CotizarVentaDolares(decimal montoDolaresAVender)
{
    decimal montoEnPesos = montoDolaresAVender * pesosPorDolarVendido;

    return montoEnPesos;
}

summary: En esta sección se debe escribir un resumen de lo que hace el método

param: Deberá haber tantas etiquetas param como argumentos reciba el método. Cada etiqueta referirá al nombre del parámetro de entrada a través de la propiedad name y deberá contener una descripción de qué se espera como argumento de ese parámetro.

returns: Acá se debe agregar una descripción sobre lo que retorna el método.

La tecnología IntelliSense de Visual Studio levantará los comentarios y mostrará la información como ayuda cuando tratemos de invocar al método.

✅ Clases estáticas
Las clases estáticas son agrupadores de atributos estáticos y métodos estáticos, es decir de datos y funciones que operan sobre esos datos respectivamente.

Para declarar una clase se debe indicar el nivel de acceso con un modificador de visibilidad (que puede ser internal o public) seguido de la palabra reservada class y un identificador para la clase.

Los nombres de las clases deben ser sustantivos con notación PascalCase.

Opcionalmente, seguido del modificador de acceso puede ir algún modificador especial como static.

public static class Cotizador
{
    private const decimal pesosPorDolarComprado = 96.75M;
    private const decimal pesosPorDolarVendido = 102.82M;

    public static decimal CotizarVentaDolares(decimal montoDolaresAVender)
    {
        decimal costoEnPesos = montoDolaresAVender * pesosPorDolarVendido;

        return costoEnPesos;
    }

    public static decimal CotizarCompraDolares(decimal montoDolaresAComprar)
    {
        decimal pagoEnPesos = montoDolaresAComprar * pesosPorDolarComprado;

        return pagoEnPesos;
    }
}

Las constantes son como atributos estáticos, la única diferencia es que su valor no puede cambiar en tiempo de ejecución.

Si seguimos buenas prácticas de programación, los atributos de una clase siempre deberán ser privados

using SC = System.Console; //Directiva ALIAS

public class Program
{
    public static void Main()
    {
        SC.WriteLine("¡Hola mundo!");
    }
}